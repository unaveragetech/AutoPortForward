name: Pylint

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # Specify the Python version (can be changed)

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint

    - name: Archive old reports
      run: |
        # Create an archive directory if it doesn't exist
        mkdir -p pylint-reports-archive

        # Move all the old reports to the archive directory
        mv pylint-reports/* pylint-reports-archive/ || echo "No old reports to move"

    - name: Run Pylint with multiple versions
      run: |
        # Define a list of Pylint versions to run sequentially
        pylint_versions=("2.13.0" "2.14.0" "2.15.0")  # Add your desired versions here
        
        # Create the reports directory for new reports
        mkdir -p pylint-reports

        # Run Pylint for each version sequentially
        for pylint_version in "${pylint_versions[@]}"; do
          # Install the specific version of Pylint
          pip install pylint==$pylint_version

          # Capture the pylint version to use in filenames
          echo "Running Pylint $pylint_version"

          # Iterate over all Python files and generate Pylint reports in JSON format
          for file in $(git ls-files '*.py'); do
            # Run Pylint and output in JSON format
            pylint_output=$(pylint --disable=all --enable=error,warning --output-format=json "$file")
            
            # Save the full JSON report
            echo "$pylint_output" > "pylint-reports/${file//\//_}_${pylint_version}_report.json"

            # Extract and calculate the score (number of issues found)
            issue_count=$(echo "$pylint_output" | jq '. | length')
            echo "Found $issue_count issues in $file with Pylint $pylint_version"

            # Create a summary report (simple version)
            echo "Pylint $pylint_version Report for $file" > "pylint-reports/${file//\//_}_${pylint_version}_summary.txt"
            echo "Total issues: $issue_count" >> "pylint-reports/${file//\//_}_${pylint_version}_summary.txt"
            echo "Detailed issues are stored in ${file//\//_}_${pylint_version}_report.json" >> "pylint-reports/${file//\//_}_${pylint_version}_summary.txt"
          done
        done

    - name: Commit and push pylint reports to repo
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        git add pylint-reports/
        git add pylint-reports-archive/
        git commit -m "Add/Update Pylint reports with multiple versions and detailed JSON reports"
        git push
