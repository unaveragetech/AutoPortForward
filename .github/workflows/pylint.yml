name: Pylint

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint

    - name: Archive old reports
      run: |
        # Create an archive directory if it doesn't exist
        mkdir -p pylint-reports-archive

        # Move all the old reports to the archive directory, if they exist
        mv pylint-reports/* pylint-reports-archive/ || echo "No old reports to move"

    - name: Run Pylint with multiple versions and generate detailed reports
      run: |
        # Define a list of Pylint versions to run sequentially
        pylint_versions=("2.13.0" "2.14.0" "2.15.0")  # Add your desired versions here
        
        # Create the reports directory for new reports
        mkdir -p pylint-reports

        # Iterate over all Python files
        python_files=$(git ls-files '*.py')
        
        # Check if there are any Python files in the repo
        if [ -z "$python_files" ]; then
          echo "No Python files found. Skipping Pylint execution."
          exit 1
        fi

        # Iterate over each Python file
        for file in $python_files; do
          # Initialize the final report file
          report_file="pylint-reports/${file//\//_}_full_report.txt"
          echo "Pylint Full Report for $file" > "$report_file"
          echo "Generated on: $(date)" >> "$report_file"
          echo "Python Version: 3.10" >> "$report_file"  # Can be dynamic based on setup-python version
          echo "" >> "$report_file"

          # Iterate over all Pylint versions sequentially
          for pylint_version in "${pylint_versions[@]}"; do
            # Install the specific version of Pylint
            pip install pylint==$pylint_version

            # Add a section for this Pylint version
            echo "==== Pylint Version: $pylint_version ====" >> "$report_file"
            echo "Running Pylint $pylint_version on $file" >> "$report_file"
            echo "" >> "$report_file"

            # Log the command and configuration
            echo "Pylint Command: pylint --disable=all --enable=error,warning --output-format=json $file" >> "$report_file"
            echo "Pylint Configuration: default (no custom config)" >> "$report_file"
            echo "" >> "$report_file"

            # Run Pylint and capture the output in JSON format
            pylint_output=$(pylint --output-format=json "$file" 2>&1)

            # Check for errors during Pylint execution
            if [ $? -ne 0 ]; then
              echo "Error during Pylint execution for $file with Pylint $pylint_version:" >> "$report_file"
              echo "$pylint_output" >> "$report_file"
              continue
            fi

            # Add general statistics to the report
            issue_count=$(echo "$pylint_output" | jq '. | length')
            echo "Total issues found: $issue_count" >> "$report_file"
            echo "" >> "$report_file"

            # Add detailed issues to the report
            echo "=== Issues Found ===" >> "$report_file"
            if [ "$issue_count" -gt 0 ]; then
              echo "$pylint_output" | jq -r '.[] | "Type: \(.type)\nMessage: \(.message)\nLine: \(.line)\nColumn: \(.column)\nSymbol: \(.symbol)\nSeverity: \(.category)\n\n"' >> "$report_file"
            else
              echo "No issues found." >> "$report_file"
            fi

            # Add a separator between different Pylint versions
            echo "=====================" >> "$report_file"
            echo "" >> "$report_file"
          done

          # Add a final summary to the report
          echo "==== End of Report for $file ====" >> "$report_file"
          echo "" >> "$report_file"
        done

    - name: Commit and push pylint reports to repo
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        git add pylint-reports/
        git add pylint-reports-archive/
        git commit -m "Add/Update full Pylint reports with multiple versions"
        git push
